@using Umbraco.Commerce.DemoStore;
@using Umbraco.Commerce.DemoStore.Models;
@using Umbraco.Commerce.Extensions;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<IProductPage>
@{
    Layout = "Page.cshtml";

    var multiVariantProductPage = Model as MultiVariantProductPage;
    var isMultiVariantProduct = multiVariantProductPage != null;
    var addedProductReference = TempData["addedProductReference"]?.ToString();
}

@section foot {
    
    @if (!addedProductReference.IsNullOrWhiteSpace())
    {
        // Show notification when product was added to cart
        
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                Toastify({
                    text: "Item successfully added to cart",
                    duration: 3000,
                    gravity: "bottom", // `top` or `bottom`
                    position: 'center', // `left`, `center` or `right`
                    backgroundColor: "#4fd1c5",
                    className: "",
                    stopOnFocus: true, // Prevents dismissing of toast on hover
                }).showToast();
            });
        </script>
    }

    @if (isMultiVariantProduct && multiVariantProductPage!.Variants is { Count: > 0 })
    {
        // Update multi-variant product variant info dynamically
        
        <script>

            // Create JS function to update variant info dynamically
            var updateProductVariantInfo = function () {

                // Convert selected values into a key value collection
                var attributeValues = Array.from($("select[data-attribute]")).reduce(function (accumulator, currentValue) {
                    accumulator[currentValue.dataset.attribute] = currentValue.value;
                    return accumulator;
                }, { });

                // Construct the post data to pass to the API controller
                var postData = {
                    productNodeId: @Model.Id,
                    attributes: attributeValues
                }

                // Disable the add to cart button while loading
                $("#add-to-cart").prop('disabled', true).css({ opacity: 0.2 });

                // Fetch the variant data for the given attribute combination and update the UI accordingly
                $.ajax({
                    url: "/api/v1/demo-store/product-variants",
                    type: "POST",
                    data: JSON.stringify(postData),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data) {
                            $("[data-variant-price]").text(data.priceFormatted);
                            $("[name=productVariantReference]").val(data.productVariantReference);
                            $(".product-image").attr("src", data.imageUrl);
                            $("#add-to-cart").prop('disabled', false).css({ opacity: 1 });
                        } else {
                            $("[data-variant-price]").text("Unavailable");
                            $("[name=productVariantReference]").val("");
                            $(".product-image").attr("src", $(".product-image").data("defaultUrl"));
                        }
                    }
                });

                return false;
            }

            // Update variant info on load
            updateProductVariantInfo();

        </script>
    }
}

<div class="pt-6">
    <div class="md:flex mb-4">
        <div class="w-full md:w-1/2 md:mr-6">
            <img src="@(Model.GetPrimaryImage()?.GetCropUrl(500, 500) ?? "https://placehold.it/400x500")"
                 data-default-url="@(Model.GetPrimaryImage()?.GetCropUrl(500, 500) ?? "https://placehold.it/400x500")"
                 class="border w-full product-image" />
            @if (Model.Images != null && Model.Images.Any())
            {
                <div class="flex flex-wrap -mx-2">
                    @foreach (var img in Model.Images)
                    {
                        <a href="@(img.GetCropUrl(500, 500))" class="product-image__thumb w-1/3 px-2 pt-4">
                            <img src="@img.GetCropUrl(150, 150)" class="border w-full" />
                        </a>
                    }
                </div>
            }
            <div class="text-center text-gray-500 mt-4 rte trim">
                @Model.GetCollectionPage()?.ImagesCredit
            </div>
        </div>
        <div class="flex-1">
            @using (Html.BeginUmbracoForm("AddToCart", "CartSurface"))
            {
                <div class="py-10">
                    <h1 class="text-2xl font-bold">@Model.Parent.Name - @Model.Name</h1>
                    @{
                        await RenderVariantsAsync(Model);
                    }
                </div>
                <button id="add-to-cart" class="font-bold border-4 border-gray-900 px-6 py-3 mb-4 lg:w-1/2 hover:bg-teal-400 hover:border-teal-400 hover:text-white" type="submit">Add to Cart</button>
            }
            <div class="flex">
                <a href="#" class="mr-4 hover:text-teal-400"><i class="fa fa-facebook-square"></i> Share it</a>
                <a href="#" class="mr-4 hover:text-teal-400"><i class="fa fa-twitter"></i> Tweet it</a>
                <a href="#" class="mr-4 hover:text-teal-400"><i class="fa fa-pinterest"></i> Pin it</a>
            </div>
        </div>
    </div>
    <hr class="my-6" />
    <div>
        <h2 class="text-2xl font-bold">Description</h2>
        <div class="rte">
            @Model.LongDescription
        </div>
    </div>
</div>

@{
    async Task RenderVariantsAsync(IProductPage product)
    {
        if (isMultiVariantProduct && multiVariantProductPage is { Variants.Count: > 0 })
        {
            // Multi-variant product
            
            @Html.Hidden("productReference", Model.GetProductReference())
            @Html.Hidden("productVariantReference", "")

            var attrs = await multiVariantProductPage.Variants.GetInUseProductAttributesAsync();

            foreach (var attr in attrs)
            {
                <p class="mt-4">@(attr.Name)</p>
                <select class="w-full border border-gray-300 p-2 mt-1" data-attribute="@(attr.Alias)" data-attribute-name="@(attr.Name)" onchange="updateProductVariantInfo()">
                    @foreach (var val in attr.Values)
                    {
                        <!option value="@val.Alias">@(val.Name)</!option>
                    }
                </select>
            }

            <p class="mt-4" data-variant-price></p>
        }
        else
        {
            var childVariants = product.Children<ProductVariant>()?.ToList();
            if (childVariants is { Count: > 0 })
            {
                // Simple variant product
                
                var isGiftCard = product is ProductPage { IsGiftCard: true };
                if (isGiftCard)
                {
                    var selectedReference = addedProductReference ?? childVariants.FirstOrDefault()?.GetProductReference();

                    <div class="gift-cards flex justify-start space-x-2 mt-4">
                        @foreach (var variant in childVariants)
                        {
                            var productReference = variant.GetProductReference();

                            <span class="relative">
                                <input type="radio" class="form-radio absolute w-0 h-0" name="productReference" id="giftcard-@productReference" value="@productReference" @Html.Raw(selectedReference == productReference ? "checked=\"checked\"" : "")/>
                                <label class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 cursor-pointer" for="giftcard-@productReference">@(await variant.CalculatePriceAsync().FormattedAsync())</label>
                            </span>
                        }
                    </div>
                }
                else
                {
                    <select name="productReference" class="w-full border border-gray-300 p-2 mt-1">
                        @foreach (var variant in childVariants)
                        {
                            var productReference = variant.GetProductReference();

                            <!option value="@productReference" @Html.Raw(addedProductReference == productReference ? "selected=\" selected\"" : "")>@(variant.Name) - @(await variant.CalculatePriceAsync().FormattedAsync())</!option>
                        }
                    </select>
                }
            }
            else
            {
                // Non-variant product
                
                @Html.Hidden("productReference", product.GetProductReference())

                <p>@(await product.CalculatePriceAsync().FormattedAsync())</p>
            }
        }

    }
}
