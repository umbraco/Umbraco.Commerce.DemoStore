@using Umbraco.Commerce.Core.Api
@using Umbraco.Commerce.DemoStore
@using Umbraco.Commerce.Extensions
@inject IUmbracoCommerceApi UmbracoCommerceApi
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Commerce.DemoStore.Models.CheckoutShippingMethodPage>
@{
    Layout = "CheckoutStepPage.cshtml";

    var store = Model.GetStore();
    var order = await Model.GetCurrentOrderAsync();
    var shippingCountry = order?.ShippingInfo.CountryId.HasValue ?? false
        ? await UmbracoCommerceApi.GetCountryAsync(order.ShippingInfo.CountryId.Value)
        : null;
    var selectedShippingMethodId = order!.ShippingInfo.ShippingMethodId ?? (shippingCountry != null && shippingCountry.DefaultShippingMethodId.HasValue
        ? shippingCountry.DefaultShippingMethodId.Value
        : null);
    var selectedShippingOptionId = selectedShippingMethodId.HasValue && order.ShippingInfo.ShippingMethodId.HasValue && selectedShippingMethodId == order.ShippingInfo.ShippingMethodId
        ? order.ShippingInfo.ShippingOption?.Id
        : null;
    var shippingMethods = await UmbracoCommerceApi.GetShippingMethodsAllowedInAsync(order!.ShippingInfo.CountryId!.Value).ToListAsync();
    var shippingMethodsRates = await Task.WhenAll(shippingMethods.Select(sm => sm.TryCalculateRatesAsync()));
    
    var nextStep = Model.GetNextStep();
}

@using (Html.BeginUmbracoForm("UpdateOrderShippingMethod", "CheckoutSurface"))
{
    <input type="hidden" name="nextStep" value="@(nextStep?.Key)" />

    <h3 class="text-xl font-medium mb-4">Shipping Method</h3>
    <ul class="border border-gray-300 rounded">
        @foreach (var item in shippingMethods.Select((sm, i) => new { ShippingMethod = sm, Index = i }))
        {
            var rates = shippingMethodsRates[item.Index];
            if (rates.Success)
            {
                foreach (var rate in rates.Result!)
                {
                    var isSelected = false;

                    if (selectedShippingMethodId.HasValue && selectedShippingMethodId.Value == item.ShippingMethod.Id)
                    {
                        if (rate.Option != null)
                        {
                            if (selectedShippingOptionId == null)
                            {
                                selectedShippingOptionId = rate.Option?.Id;
                                isSelected = true;
                            }
                            else if (selectedShippingOptionId == rate.Option?.Id)
                            {
                                isSelected = true;
                            }
                        }
                        else
                        {
                            isSelected = true;
                        }
                    }

                    <li class="border-gray-300 @(item.Index > 0 ? "border-t " : "")">
                        <label class="flex items-center py-4 px-4 cursor-pointer hover:bg-gray-100">
                            <input name="shippingMethod" type="radio" value="@item.ShippingMethod.Id" class="mr-3" required
                                   data-option-id="@rate.Option?.Id"
                            @Html.Raw(isSelected ? " checked=\"checked\"" : "") />
                            <span class="font-medium">
                                @(item.ShippingMethod.Name)
                                @if (rate.Option != null)
                                {
                                    <text> - @rate.Option.Name</text>
                                }
                            </span>
                            <span class="flex-1 text-right">@(await rate.Value.FormattedAsync())</span>
                        </label>
                    </li>
                }
            }
        }
    </ul>

    <input type="hidden" name="shippingOptionId" value="@(selectedShippingOptionId)" />

    @await Html.PartialAsync("CheckoutPrevNext")
}
