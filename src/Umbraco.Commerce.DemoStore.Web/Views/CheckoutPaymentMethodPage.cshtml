@using Umbraco.Commerce.Core.Api
@using Umbraco.Commerce.Core.Models
@using Umbraco.Commerce.DemoStore
@using Umbraco.Commerce.Extensions
@inject IUmbracoCommerceApi UmbracoCommerceApi
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Commerce.DemoStore.Models.CheckoutPaymentMethodPage>
@{
    Layout = "CheckoutStepPage.cshtml";

    var store = Model.GetStore();
    var order = await Model.GetCurrentOrderAsync();
    var paymentCountry = order?.PaymentInfo.CountryId.HasValue ?? false
        ? await UmbracoCommerceApi.GetCountryAsync(order.PaymentInfo.CountryId.Value)
        : null;
    var paymentMethods = await UmbracoCommerceApi.GetPaymentMethodsAllowedInAsync(order!.PaymentInfo.CountryId!.Value).ToListAsync();
    var zeroValuePaymentMethod = paymentMethods.FirstOrDefault(x => x.Alias == "zeroValue");
    var nonZeroValuePaymentMethods = paymentMethods.Where(x => x.Alias != "zeroValue").ToList();
    var nonZeroValuePaymentMethodFees = await Task.WhenAll(nonZeroValuePaymentMethods.Select(x => x.TryCalculateFeeAsync()));
    
    var nextStep = Model.GetNextStep();
}

@using (Html.BeginUmbracoForm("UpdateOrderPaymentMethod", "CheckoutSurface"))
{
    <input type="hidden" name="nextStep" value="@(nextStep?.Key)" />

    <h3 class="text-xl font-medium mb-4 mt-8">Payment Method</h3>

    if (order.TotalPrice.Value.WithTax > 0)
    {
        <ul class="border border-gray-300 rounded">
            @foreach (var item in nonZeroValuePaymentMethods.Select((pm, i) => new { PaymentMethod = pm, Index = i }))
            {
                var fee = nonZeroValuePaymentMethodFees[item.Index];
                <li class="border-gray-300 @(item.Index > 0 ? "border-t " : "")">
                    <label class="flex items-center py-4 px-4 cursor-pointer hover:bg-gray-100">
                        <input name="paymentMethod" type="radio" value="@item.PaymentMethod.Id" class="mr-3" @Html.Raw((order.PaymentInfo.PaymentMethodId.HasValue && order.PaymentInfo.PaymentMethodId.Value == item.PaymentMethod.Id) || (paymentCountry != null && paymentCountry.DefaultPaymentMethodId == item.PaymentMethod.Id) ? "checked=\"checked\"" : "") required />
                        <span class="font-medium">@(item.PaymentMethod.Name)</span>
                        <span class="flex-1 text-right">@(await fee.ResultOr(Price.ZeroValue(order.CurrencyId)).FormattedAsync())</span>
                    </label>
                </li>
            }
        </ul>
    }
    else
    {
        <input type="hidden" name="paymentMethod" value="@(zeroValuePaymentMethod.Id)" />
        <div class="border border-gray-300 rounded py-4 px-4 text-center">It looks like today is your lucky day, there is nothing for you to pay 🎉</div>
    }

    @await Html.PartialAsync("CheckoutPrevNext")
}
